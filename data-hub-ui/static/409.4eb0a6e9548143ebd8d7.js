"use strict";(self.webpackChunk_zjlab_fe_data_hub_ui=self.webpackChunk_zjlab_fe_data_hub_ui||[]).push([[409],{10409:(r,n,e)=>{e.r(n),e.d(n,{default:()=>o});const o='## 何时使用\r\n\r\n\r\nuploadDrawer 是一个用于文件上传的 React 组件。它提供了一个抽屉式界面，允许用户选择和上传文件，支持大文件分片上传、断点续传、文件夹上传等功能。\r\n\r\n## 主要特性\r\n\r\n1. 支持拖拽上传\r\n2. 支持文件夹上传\r\n3. 支持大文件分片上传\r\n4. 支持断点续传\r\n5. 显示上传进度\r\n6. 可自定义上传逻辑\r\n\r\n## 代码演示\r\n\r\n<demo src="@/components/uploadDrawer/demo/index.tsx"></demo>\r\n\r\n## 使用方法\r\n\r\n### 基本用法\r\n\r\n\r\n首先,确保在应用的根组件中包裹了UploadStoreProvider:\r\n\r\n```jsx\r\nimport { UploadStoreProvider } from \'path/to/uploadDrawer\';\r\n\r\nfunction RootComponent() {\r\n  return (\r\n    <UploadStoreProvider>\r\n      <App />\r\n    </UploadStoreProvider>\r\n  );\r\n}\r\n```\r\n\r\n然后,在你的组件中使用FileUploadDrawer:\r\n\r\n```jsx\r\nimport FileUploadDrawer from \'path/to/uploadDrawer\';\r\n\r\nfunction MyComponent() {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleUploadUrls = async (fileName, partCount) => {\r\n    // 实现获取上传 URL 的逻辑\r\n  };\r\n\r\n  const handleCancelUpload = async (fileName, uploadId) => {\r\n    // 实现取消上传的逻辑\r\n  };\r\n\r\n  const handleOnePartDone = async (fileName, uploadId, partNum) => {\r\n    // 实现单个分片上传完成的逻辑\r\n  };\r\n\r\n  const handleAllPartDone = async (fileName, uploadId) => {\r\n    // 实现所有分片上传完成的逻辑\r\n  };\r\n\r\n  return (\r\n    <FileUploadDrawer\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      identifier="uniqueIdentifier"\r\n      getUploadUrls={handleUploadUrls}\r\n      onCancelUpload={handleCancelUpload}\r\n      onOnePartDone={handleOnePartDone}\r\n      onAllPartDone={handleAllPartDone}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n### 属性说明\r\n\r\nFileUploadDrawer 组件接受以下属性：\r\n\r\n```typescript\r\ninterface FileInfo { fileName: string; isFolder?: boolean };\r\n\r\ninterface UploadInfoErrorResult { status: false; reason?: string };\r\ninterface UploadInfoSuccessResult { status: true; uploadInfo: { uploadUrls: UploadUrl[]; uploadId: string } };\r\ntype UploadInfoResult = UploadInfoErrorResult | UploadInfoSuccessResult;\r\n\r\ninterface FileUploadDrawerProps {\r\n  open: boolean;\r\n  identifier: string;\r\n  maxSizePerFile?: number;\r\n  directory?: boolean;\r\n  root?: string;\r\n  uploadHistory?: FileInfo[];\r\n  dragAreaDescription?: React.ReactNode;\r\n  accept?: string;\r\n  footer?: React.ReactNode;\r\n  onClose: () => void;\r\n  onSuccess?: (file: File) => void;\r\n  getUploadUrls: (fileName: string, partCount: number) => Promise<UploadInfoResult>;\r\n  onCancelUpload: (fileName: string, uploadId: string) => Promise<UploadInfoErrorResult | { status: true }>;\r\n  onOnePartDone: (fileName: string, uploadId: string, partNum: number) => Promise<UploadInfoErrorResult | { status: true }>;\r\n  onAllPartDone: (fileName: string, uploadId: string) => Promise<UploadInfoErrorResult | { status: true }>;\r\n}\r\n```\r\n\r\n1. `open`: 布尔值，控制抽屉是否打开\r\n2. `onClose`: 函数，关闭抽屉时调用\r\n3. `identifier`: 字符串，用于标识上传任务的唯一标识符\r\n4. `maxSizePerFile`: 可选，数字，单个文件的最大大小（字节），默认为 10GB\r\n5. `directory`: 可选，布尔值，是否支持文件夹上传，默认为 false\r\n6. `root`: 可选，字符串，上传文件的根路径\r\n7. `uploadHistory`: 可选，数组，包含之前上传的文件信息\r\n8. `onSuccess`: 可选，函数，文件上传成功时调用\r\n9. `getUploadUrls`: 函数，获取上传 URL 的方法\r\n10. `onCancelUpload`: 函数，取消上传时调用\r\n11. `onOnePartDone`: 函数，单个分片上传完成时调用\r\n12. `onAllPartDone`: 函数，所有分片上传完成时调用\r\n13. `dragAreaDescription`: 可选，React 节点，自定义拖拽区域描述\r\n14. `accept`: 可选，字符串，接受的文件类型\r\n15. `footer`: 可选，React 节点，自定义抽屉底部内容\r\n\r\n### 高级用法\r\n\r\n1. 自定义拖拽区域描述：\r\n\r\n```jsx\r\n<FileUploadDrawer\r\n  // ... 其他属性\r\n  dragAreaDescription={<p>将文件拖到此处，或点击上传</p>}\r\n/>\r\n```\r\n\r\n2. 限制文件类型：\r\n\r\n```jsx\r\n<FileUploadDrawer\r\n  // ... 其他属性\r\n  accept=".jpg,.png,.pdf"\r\n/>\r\n```\r\n\r\n3. 自定义底部内容：\r\n\r\n```jsx\r\n<FileUploadDrawer\r\n  // ... 其他属性\r\n  footer={<Button onClick={handleCustomAction}>自定义操作</Button>}\r\n/>\r\n```\r\n\r\n## 注意事项\r\n\r\n1. 确保为每个 FileUploadDrawer 实例提供唯一的 `identifier`。\r\n2. 实现 `getUploadUrls`、`onCancelUpload`、`onOnePartDone` 和 `onAllPartDone` 方法以处理文件上传的各个阶段。\r\n3. 如果需要支持文件夹上传，将 `directory` 属性设置为 true。\r\n4. 使用 `maxSizePerFile` 属性限制单个文件的大小。\r\n\r\n## 内部实现\r\n\r\nuploadDrawer 组件内部使用了以下关键技术和方法：\r\n\r\n1. 使用 React Context 进行状态管理（参见 `UploadStoreProvider.tsx`）。\r\n2. 利用 Web API 的 File 和 Blob 对象处理文件（参见 `utils/splitFileIntoChunk.ts`）。\r\n3. 使用 IndexedDB 存储上传进度，支持断点续传（参见 `utils/fileDB`）。\r\n4. 实现了自定义的文件拖拽上传逻辑（参见 `fileUploadDrawerListProgressButton.tsx`）。\r\n5. 使用 Ant Design 组件库构建用户界面。\r\n\r\n通过这些实现，uploadDrawer 组件提供了强大的文件上传功能，同时保持了良好的用户体验和性能。'}}]);