"use strict";(self.webpackChunk_zjlab_fe_data_hub_ui=self.webpackChunk_zjlab_fe_data_hub_ui||[]).push([[102],{69102:(n,r,e)=>{e.r(r),e.d(r,{default:()=>s});const s="# PermissionEditor 权限编辑器\r\n\r\n一个用于编辑用户权限的 React 组件，支持分层级的权限选择，包含父级权限和子级权限的联动逻辑。\r\n\r\n## 功能特性\r\n\r\n- 🏷️ **分层级权限管理**：支持父子级权限结构\r\n- 🔒 **只读权限控制**：部分权限可设为只读状态\r\n- 🔄 **智能联动**：父子级权限自动联动选择\r\n- ✏️ **可编辑控制**：支持整体编辑状态的控制\r\n- 📱 **响应式布局**：自适应不同屏幕尺寸\r\n\r\n\r\n## 使用方法\r\n\r\n### 基础用法\r\n\r\n```tsx\r\nimport React, { useState } from 'react';\r\nimport PermissionEditor from './components/permission-editor/permissionEditor';\r\n\r\nconst App = () => {\r\n  const [permissions, setPermissions] = useState([\r\n    {\r\n      module: 'workbench',\r\n      grentedList: ['1', '3'], // 部分子权限被选中\r\n    },\r\n    {\r\n      module: 'agentic',\r\n      grentedList: [], // 无子权限的模块\r\n    },\r\n  ]);\r\n\r\n  const handlePermissionChange = (newPermissions) => {\r\n    console.log('权限变更:', newPermissions);\r\n    setPermissions(newPermissions);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>用户权限设置</h2>\r\n      <PermissionEditor\r\n        initialPermissions={permissions}\r\n        onChange={handlePermissionChange}\r\n        editable={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n### 只读模式\r\n\r\n```tsx\r\n<PermissionEditor\r\n  initialPermissions={userPermissions}\r\n  editable={false}\r\n/>\r\n```\r\n## 代码演示\r\n\r\n<demo src=\"@/components/permission-editor/demo/index.tsx\"></demo>\r\n\r\n## API\r\n\r\n### Props\r\n\r\n| 参数 | 类型 | 默认值 | 说明 |\r\n|------|------|--------|------|\r\n| `initialPermissions` | `PermissionModule[]` | `[]` | 初始权限数据 |\r\n| `onChange` | `(permissions: PermissionModule[]) => void` | - | 权限变化时的回调函数 |\r\n| `editable` | `boolean` | `true` | 是否可编辑，为 `false` 时组件为只读状态 |\r\n\r\n## 🗂 数据结构\r\n\r\n### PermissionModule 接口\r\n\r\n```typescript\r\ninterface PermissionModule {\r\n  module: string;        // 权限模块标识符\r\n  grentedList: string[]; // 已授权的子权限列表\r\n}\r\n```\r\n\r\n### 权限配置结构\r\n如需修改页面中的权限内容，如新增或删减，请修改以下配置内容\r\n```typescript\r\nconst permissionTags = [\r\n  {\r\n    label: '智能体权限',    // 显示名称\r\n    value: 'agentic',      // 权限标识符\r\n    readOnly: false,       // 是否只读\r\n    children: [],          // 子权限（空数组表示无子权限）\r\n  },\r\n  {\r\n    label: '工作台权限',\r\n    value: 'workbench',\r\n    readOnly: false,\r\n    children: [\r\n      {\r\n        label: '可视化工作流',\r\n        value: '1',\r\n        readOnly: false,\r\n      },\r\n      {\r\n        label: 'Notebook',\r\n        value: '2',\r\n        readOnly: true,     // 只读权限，用户无法修改\r\n      },\r\n      // ... 更多子权限\r\n    ],\r\n  },\r\n];\r\n```\r\n\r\n### 数据示例\r\n\r\n```typescript\r\n// 输入数据格式\r\nconst initialPermissions = [\r\n  {\r\n    module: 'workbench',\r\n    grentedList: ['1', '3', '4'], // 选中了部分子权限\r\n  },\r\n  {\r\n    module: 'agentic',\r\n    grentedList: [], // 无子权限的模块，父级被选中\r\n  },\r\n];\r\n\r\n// 输出数据格式（onChange 回调）\r\nconst outputPermissions = [\r\n  {\r\n    module: 'workbench',\r\n    grentedList: ['1', '3', '4', '5'], // 新增了权限 '5'\r\n  },\r\n  {\r\n    module: 'agentic',\r\n    grentedList: [], // 依然保持为无子权限状态\r\n  },\r\n];\r\n```\r\n\r\n## 🔄 交互逻辑\r\n\r\n### 父子级联动规则\r\n\r\n1. **选中父级权限**：\r\n   - 自动选中所有非只读的子级权限\r\n   - 只读子权限保持原状态不变\r\n\r\n2. **取消父级权限**：\r\n   - 自动取消所有子级权限（包括只读）\r\n   - 该模块从权限列表中移除\r\n\r\n3. **选中子级权限**：\r\n   - 如果所有可选子级都被选中，自动选中父级\r\n   - 如果部分子级被选中，父级保持未选中状态\r\n\r\n4. **取消子级权限**：\r\n   - 如果父级原本被选中，自动取消父级选中状态\r\n   - 如果所有子级都被取消，该模块从权限列表中移除\r\n\r\n\r\n## 相关组件\r\n\r\n### PermissionEditModal 权限编辑弹窗\r\n\r\n基于 PermissionEditor 构建的模态框组件，提供完整的权限编辑界面。\r\n\r\n#### 功能特性\r\n\r\n- 📋 **模态框形式**：以弹窗方式展示权限编辑器\r\n- 💾 **确认/取消操作**：提供保存和取消按钮\r\n- 🔄 **状态管理**：内置权限变更的状态管理\r\n\r\n#### 使用方法\r\n\r\n```tsx\r\nimport React, { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport PermissionEditModal from '../permissionEditModal';\r\n\r\nconst UserManagement = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [userPermissions, setUserPermissions] = useState([\r\n    {\r\n      module: 'workbench',\r\n      grentedList: ['1', '3'],\r\n    }\r\n  ]);\r\n\r\n  const handleSave = (permissions) => {\r\n    setUserPermissions(permissions);\r\n    setModalVisible(false);\r\n    console.log('保存权限:', permissions);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={() => setModalVisible(true)}>\r\n        编辑权限\r\n      </Button>\r\n      \r\n      <PermissionEditModal\r\n        open={modalVisible}\r\n        initialPermissions={userPermissions}\r\n        onSave={handleSave}\r\n        onCancel={handleCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\n#### API\r\n\r\n| 参数 | 类型 | 默认值 | 说明 |\r\n|------|------|--------|------|\r\n| `open` | `boolean` | `false` | 控制弹窗显示/隐藏 |\r\n| `initialPermissions` | `PermissionModule[]` | `[]` | 初始权限列表 |\r\n| `onSave` | `(permissions: PermissionModule[]) => void` | - | 保存权限时的回调 |\r\n| `onCancel` | `() => void` | - | 取消编辑时的回调 |\r\n\r\n---\r\n\r\n### PermissionViewPopover 权限查看气泡卡片\r\n\r\n用于展示用户权限的轻量级气泡组件，支持快速查看权限详情。\r\n\r\n#### 功能特性\r\n\r\n- 👁️ **只读展示**：以只读模式展示用户权限\r\n- 🎈 **气泡形式**：轻量级的气泡卡片展示\r\n- 📱 **紧凑布局**：适合在列表、表格中使用\r\n\r\n#### 使用方法\r\n\r\n```tsx\r\nimport React from 'react';\r\nimport { Button, Tag } from 'antd';\r\nimport PermissionViewPopover from '../permissionViewPopover';\r\n\r\nconst UserList = () => {\r\n  const userPermissions = [\r\n    {\r\n      module: 'workbench',\r\n      grentedList: ['1', '3', '4'],\r\n    },\r\n    {\r\n      module: 'agentic',\r\n      grentedList: [],\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {/* 按钮触发方式 */}\r\n      <PermissionViewPopover permissions={userPermissions}>\r\n        <Button type=\"link\">查看权限</Button>\r\n      </PermissionViewPopover>\r\n\r\n      {/* 标签触发方式 */}\r\n      <PermissionViewPopover permissions={userPermissions}>\r\n        <Tag color=\"blue\">权限详情</Tag>\r\n      </PermissionViewPopover>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n#### API\r\n\r\n| 参数 | 类型 | 默认值 | 说明 |\r\n|------|------|--------|------|\r\n| `initialPermissions` | `PermissionModule[]` | `[]` | 要展示的权限列表 |\r\n| `children` | `React.ReactNode` | - | 触发元素 |\r\n| `title` | `string` | `\"权限详情\"` | 气泡标题 |\r\n\r\n\r\n\r\n"}}]);